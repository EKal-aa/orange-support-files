<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Paint Data" qualified_name="Orange.widgets.data.owpaintdata.OWPaintData" project_name="Orange3" version="" title="Paint Data" position="(157.0, 287.0)" />
		<node id="1" name="Feature Constructor" qualified_name="Orange.widgets.data.owfeatureconstructor.OWFeatureConstructor" project_name="Orange3" version="" title="Feature Constructor" position="(288.0, 288.0)" />
		<node id="2" name="Select Columns" qualified_name="Orange.widgets.data.owselectcolumns.OWSelectAttributes" project_name="Orange3" version="" title="Select Columns" position="(420.0, 287.0)" />
		<node id="3" name="Test and Score" qualified_name="Orange.widgets.evaluate.owtestandscore.OWTestAndScore" project_name="Orange3" version="" title="Test and Score" position="(727.0, 294.0)" />
		<node id="4" name="Linear Regression" qualified_name="Orange.widgets.model.owlinearregression.OWLinearRegression" project_name="Orange3" version="" title="Linear Regression" position="(582.0, 358.0)" />
		<node id="5" name="Test and Score" qualified_name="Orange.widgets.evaluate.owtestandscore.OWTestAndScore" project_name="Orange3" version="" title="Test and Score" position="(714.0, 677.0)" />
		<node id="6" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Diagram_target_predictions.py" position="(579.0, 185.0)" />
		<node id="7" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Diagram_target_predictions.py" position="(914.0, 293.0)" />
		<node id="8" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Diagram_target_predictions.py" position="(921.0, 667.0)" />
		<node id="9" name="Python Script" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3" version="" title="Poly_Regression.py" position="(583.0, 739.0)" />
		<node id="10" name="Data Table" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3" version="" title="Data Table" position="(751.0, 901.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="1" source_node_id="1" sink_node_id="2" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="2" source_node_id="2" sink_node_id="3" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="3" source_node_id="4" sink_node_id="3" source_channel="Learner" sink_channel="Learner" enabled="true" />
		<link id="4" source_node_id="2" sink_node_id="6" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="5" source_node_id="3" sink_node_id="7" source_channel="Predictions" sink_channel="Data" enabled="true" />
		<link id="6" source_node_id="2" sink_node_id="5" source_channel="Data" sink_channel="Data" enabled="true" />
		<link id="7" source_node_id="9" sink_node_id="5" source_channel="Learner" sink_channel="Learner" enabled="true" />
		<link id="8" source_node_id="5" sink_node_id="10" source_channel="Predictions" sink_channel="Data" enabled="true" />
		<link id="9" source_node_id="5" sink_node_id="8" source_channel="Predictions" sink_channel="Data" enabled="true" />
	</links>
	<annotations>
		<text id="0" type="text/plain" rect="(216.0, 171.0, 174.0, 35.0)" font-family="MS Shell Dlg 2" font-size="16">construct some data</text>
		<arrow id="1" start="(254.0, 218.0)" end="(187.0, 254.0)" fill="#C1272D" />
		<arrow id="2" start="(293.0, 216.0)" end="(291.0, 255.0)" fill="#C1272D" />
		<arrow id="3" start="(324.0, 214.0)" end="(392.0, 254.0)" fill="#C1272D" />
		<text id="4" type="text/plain" rect="(734.0, 104.0, 150.0, 69.0)" font-family="MS Shell Dlg 2" font-size="16">see the diagram with input data </text>
		<arrow id="5" start="(724.0, 141.0)" end="(629.0, 174.0)" fill="#C1272D" />
		<text id="6" type="text/plain" rect="(1056.0, 242.0, 150.0, 88.0)" font-family="MS Shell Dlg 2" font-size="16">see the diagram with predictions from a linear regression model</text>
		<arrow id="7" start="(1044.0, 287.0)" end="(961.0, 295.0)" fill="#C1272D" />
		<text id="8" type="text/plain" rect="(1058.0, 445.0, 150.0, 107.0)" font-family="MS Shell Dlg 2" font-size="16">see the diagram with predictions from a polynomial regression model with degree =2</text>
		<arrow id="9" start="(1074.0, 560.0)" end="(967.0, 646.0)" fill="#C1272D" />
		<text id="10" type="text/markdown" rect="(85.0, 18.0, 1212.0, 52.0)" font-family="MS Shell Dlg 2" font-size="16"># Example with 3D diagram (2 numerical features and one numerical target)</text>
	</annotations>
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'attr1': 'x1', 'attr2': 'x2', 'autocommit': True, 'brushRadius': 75, 'controlAreaVisible': True, 'data': [[0.14159043018086181, 0.9429273355756367, 0.0], [0.20274788113000236, 0.9147187089562073, 0.0], [0.2301858769640045, 0.9355495684470978, 0.0], [0.4331531550786185, 0.9540286938622847, 0.0], [0.48322988863097743, 0.9564077494645037, 0.0], [0.6244089636984986, 0.9252519437720569, 0.0], [0.6750951424579249, 0.9649972216035541, 0.0], [0.8391279489698901, 0.9201869230728039, 0.0], [0.8543192188776649, 0.9716268668184898, 0.0], [0.873490354884243, 0.9045430793998442, 0.0], [0.937163675924017, 0.8963155965644902, 0.0], [0.9390533368814793, 0.8017272544360828, 0.0], [0.8360641610169097, 0.7632517668368964, 0.0], [0.7277216066211502, 0.8156803144861545, 0.0], [0.704873816524606, 0.7903835512092465, 0.0], [0.525995861750518, 0.7903991175569284, 0.0], [0.43852689060184463, 0.7189670243447659, 0.0], [0.376439558200781, 0.7067362260954926, 0.0], [0.2976506373870215, 0.8584173674537698, 0.0], [0.2215300689239041, 0.7635173412140472, 0.0], [0.1937723734475425, 0.7836297173771483, 0.0], [0.11232547476292352, 0.7582033068678466, 0.0], [0.06823205486577749, 0.6560245141856832, 0.0], [0.08541735793492049, 0.6659598072339297, 0.0], [0.10899799884722583, 0.5999453494778051, 0.0], [0.13665704094203765, 0.5184638641222163, 0.0], [0.26019988619574996, 0.5840504635719685, 0.0], [0.30765124456806336, 0.6705461753988874, 0.0], [0.36545716897396985, 0.6455596733274992, 0.0], [0.4289207958888658, 0.676379920408209, 0.0], [0.5735180856741137, 0.6051909826172768, 0.0], [0.652406509672274, 0.6657104826786794, 0.0], [0.7174239810308108, 0.5770568052637306, 0.0], [0.8086795568778142, 0.5952325240024383, 0.0], [0.7812866788249112, 0.5646212260893183, 0.0], [0.9025725718946801, 0.5954372914856153, 0.0], [0.8751646889662312, 0.5330770598532314, 0.0], [0.8799561596673108, 0.4469827106310359, 0.0], [0.8296674822519818, 0.4465244449384787, 0.0], [0.6477180667340928, 0.4321111283147795, 0.0], [0.5338202849372968, 0.4407730458353857, 0.0], [0.4874329708631976, 0.4247005224213015, 0.0], [0.40579840729622557, 0.3916438938975665, 0.0], [0.29784310506679573, 0.4750753473035345, 0.0], [0.24304505987721597, 0.44103865954803034, 0.0], [0.20260344090008178, 0.4816199220995818, 0.0], [0.09374864981720749, 0.4844215702561473, 0.0], [0.046946636851246046, 0.3913990655391613, 0.0], [0.021286840388918087, 0.36710661861707305, 0.0], [0.049511436821091714, 0.3297530832705637, 0.0], [0.13375447814241206, 0.23623528134362243, 0.0], [0.2021709273484608, 0.31782885050989024, 0.0], [0.20266442574319138, 0.23353782423248634, 0.0], [0.2801344015505251, 0.2744318750439383, 0.0], [0.3885533772340551, 0.3088579255742397, 0.0], [0.5165077990736988, 0.29576546018808775, 0.0], [0.568081081419708, 0.23560958486332254, 0.0], [0.6279471885077569, 0.35918939582284276, 0.0], [0.7662220918075675, 0.3341669348714299, 0.0], [0.8397290126160651, 0.36706578103530063, 0.0], [0.8842614516352031, 0.31132864172380204, 0.0], [0.8107757728585837, 0.3547301196318222, 0.0], [0.9347551094842687, 0.1955532722058126, 0.0], [0.8471974070101957, 0.20783740637332468, 0.0], [0.8664016771933093, 0.1582542968595595, 0.0], [0.7316121378195329, 0.17236302080596558, 0.0], [0.5135651871835205, 0.15219510337040082, 0.0], [0.47056585665244377, 0.11371742152188219, 0.0], [0.3591563232239965, 0.1430160551679486, 0.0], [0.23467773192197888, 0.08740445620365475, 0.0], [0.17507736483692837, 0.10530211858738925, 0.0], [0.13966291388985602, 0.2079198531899922, 0.0], [0.06637082546594861, 0.11831767854235596, 0.0], [0.09011896640382816, 0.11246700469871518, 0.0], [0.09003730494327034, 0.06788566729285536, 0.0], [0.009954893521048183, 0.06243839472282934, 0.0], [0.3007728565130706, 0.057928310421664755, 0.0], [0.1898069796133725, 0.0037706305315672595, 0.0], [0.847216347879121, 0.0022258701653571807, 0.0], [0.8775751592254244, 0.10865841471092705, 0.0], [0.9238091930932375, 0.13003394719399763, 0.0], [0.8625499729359504, 0.0541921357751796, 0.0], [0.9146101818054697, 0.01869743108874993, 0.0], [0.7271941602832985, 0.11548954785823674, 0.0], [0.6405792178511597, 0.037995177902810394, 0.0], [0.66435105279175, 0.05801139152430014, 0.0], [0.5033577253545529, 0.056246853867190166, 0.0], [0.6669685172976496, 0.2687096379995272, 0.0], [0.4146099590213741, 0.621106535290239, 0.0], [0.433728813559322, 0.5356137479541735, 0.0], [0.5577523949889462, 0.6955973813420622, 0.0], [0.7456669123065587, 0.7039443535188217, 0.0], [0.9198010316875462, 0.6816857610474631, 0.0], [0.4600368459837878, 0.8305400981996727, 0.0], [0.38236551215917464, 0.8667103109656301, 0.0], [0.43247605011053797, 0.21564648117839613, 0.0], [0.9887030213706708, 0.009754500818330625, 0.0], [0.9912085482682389, 0.9877414075286416, 0.0], [0.009042004421518042, 0.9877414075286416, 0.0], [0.006536477523949875, 0.008363338788870633, 0.0]], 'density': 7, 'hasAttr2': True, 'labels': ['C1', 'C2'], 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xef\x00\x00\x00G\x00\x00\x05\x0f\x00\x00\x03\x8d\x00\x00\x00\xf0\x00\x00\x00f\x00\x00\x05\x0e\x00\x00\x03\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x00\xf0\x00\x00\x00f\x00\x00\x05\x0e\x00\x00\x03\x8c', 'symbol_size': 10, 'table_name': 'Painted data', '__version__': 1}</properties>
		<properties node_id="1" format="pickle">gASV4QEAAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNzYXZlZFdpZGdldEdlb21ldHJ5
lENCAdnQywADAAAAAAM8AAABDgAABY8AAANAAAADPQAAAS0AAAWOAAADPwAAAAAAAAAAB4AAAAM9
AAABLQAABY4AAAM/lIwLX192ZXJzaW9uX1+USwKMEGNvbnRleHRfc2V0dGluZ3OUXZSMFW9yYW5n
ZXdpZGdldC5zZXR0aW5nc5SMB0NvbnRleHSUk5QpgZR9lCiMBnZhbHVlc5R9lCiMDGN1cnJlbnRJ
bmRleJRLAEr+////hpSMC2Rlc2NyaXB0b3JzlF2UKIwoT3JhbmdlLndpZGdldHMuZGF0YS5vd2Zl
YXR1cmVjb25zdHJ1Y3RvcpSMFENvbnRpbnVvdXNEZXNjcmlwdG9ylJOUjAF5lIwZMTAwICsgNSpl
eHAoeDEpICsgMip4MioqM5ROh5SBlGgUjANYMV+UjAUxMCp4MZROh5SBlGgUjANYMl+UjAUxMCp4
MpROh5SBlGWMF2V4cHJlc3Npb25zX3dpdGhfdmFsdWVzlIlK/v///4aUaARLAnWMCmF0dHJpYnV0
ZXOUfZQojAJ4MZRLAowCeDKUSwJ1jAVtZXRhc5R9lHViYXUu
</properties>
		<properties node_id="2" format="pickle">gASVNgMAAAAAAAB9lCiMC2F1dG9fY29tbWl0lIiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjBNpZ25v
cmVfbmV3X2ZlYXR1cmVzlImME3NhdmVkV2lkZ2V0R2VvbWV0cnmUQ0IB2dDLAAMAAAAAAJgAAADp
AAADhAAAAscAAACYAAAA6QAAA4QAAALHAAAAAAAAAAAHgAAAAJgAAADpAAADhAAAAseUjBJ1c2Vf
aW5wdXRfZmVhdHVyZXOUiYwLX192ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVv
cmFuZ2V3aWRnZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojBFkb21h
aW5fcm9sZV9oaW50c5R9lCiMAngylEsChpSMCWF2YWlsYWJsZZRLAIaUjAJ4MZRLAoaUaBVLAYaU
jANYMV+USwKGlIwJYXR0cmlidXRllEsAhpSMA1gyX5RLAoaUaBxLAYaUjAF5lEsChpSMBWNsYXNz
lEsAhpR1Sv7///+GlGgHSwF1jAphdHRyaWJ1dGVzlH2UKGgXSwJoE0sCaCFLAowDWDFflEsCjANY
Ml+USwJ1jAVtZXRhc5R9lHViaAwpgZR9lChoD32UKGgRfZQoaBdLAoaUaBxLAIaUaBNLAoaUaBxL
AYaUjANYMWOUSwKGlGgcSwKGlIwDWDJjlEsChpRoHEsDhpRoIUsChpRoI0sAhpR1Sv7///+GlGgH
SwF1aCZ9lChoF0sCaBNLAmghSwJoNEsCaDdLAnVoKn2UdWJoDCmBlH2UKGgPfZQoaBF9lChoF0sC
hpRoHEsAhpRoE0sChpRoHEsBhpRoIUsChpRoI0sAhpR1Sv7///+GlGgHSwF1aCZ9lChoF0sCaBNL
AmghSwJ1aCp9lHViaAwpgZR9lChoD32UKIwRZG9tYWluX3JvbGVfaGludHOUfZQojAJ4MZRLAoaU
jAlhdHRyaWJ1dGWUSwCGlIwCeDKUSwKGlGhTSwGGlIwCRDGUSwGGlIwFY2xhc3OUSwCGlHVK/v//
/4aUaAdLAXVoJn2UKGhRSwJoVUsCaFhLAXVoKn2UdWJldS4=
</properties>
		<properties node_id="3" format="pickle">gASVVAMAAAAAAAB9lCiMFGNvbXBhcmlzb25fY3JpdGVyaW9ulEsAjBJjb250cm9sQXJlYVZpc2li
bGWUiIwNY3Zfc3RyYXRpZmllZJSJjAduX2ZvbGRzlEsCjAluX3JlcGVhdHOUSwOMCnJlc2FtcGxp
bmeUSwCMBHJvcGWURz+5mZmZmZmajAtzYW1wbGVfc2l6ZZRLCYwTc2F2ZWRXaWRnZXRHZW9tZXRy
eZRDQgHZ0MsAAwAAAAAC7AAAAWEAAAX3AAADOQAAAuwAAAFhAAAF9wAAAzkAAAAAAAAAAAeAAAAC
7AAAAWEAAAX3AAADOZSMEnNodWZmbGVfc3RyYXRpZmllZJSIjAh1c2Vfcm9wZZSJjAtzY29yZV90
YWJsZZR9lIwMc2hvd25fc2NvcmVzlI+UKIwDTVNFlIwCQ0GUjANBVUOUjA5UcmFpbiB0aW1lIFtz
XZSMA01BRZSMDVRlc3QgdGltZSBbc12UjARSTVNFlIwGUmVjYWxslIwJUHJlY2lzaW9ulIwCUjKU
jAJGMZSQc4wLX192ZXJzaW9uX1+USwOMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRn
ZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojA9jbGFzc19zZWxlY3Rp
b26UjBYoQXZlcmFnZSBvdmVyIGNsYXNzZXMplEr/////hpSMDGZvbGRfZmVhdHVyZZROSv7///+G
lIwVZm9sZF9mZWF0dXJlX3NlbGVjdGVklIlK/v///4aUaA19lGgcSwN1jAphdHRyaWJ1dGVzlIwD
WDFflEsChpSMA1gyX5RLAoaUhpSMBW1ldGFzlCmMCmNsYXNzX3ZhcnOUjAF5lEsChpSFlHViaCEp
gZR9lChoJH2UKIwPY2xhc3Nfc2VsZWN0aW9ulIwWKEF2ZXJhZ2Ugb3ZlciBjbGFzc2VzKZRK////
/4aUjAxmb2xkX2ZlYXR1cmWUTkr+////hpSMFWZvbGRfZmVhdHVyZV9zZWxlY3RlZJSJSv7///+G
lIwLc2NvcmVfdGFibGWUfZRoHEsDdWgujAJ4MZRLAoaUjAJ4MpRLAoaUhpRoNCloNYwCRDGUSwGG
lIWUdWJldS4=
</properties>
		<properties node_id="4" format="literal">{'alpha_index': 0, 'auto_apply': True, 'autosend': True, 'controlAreaVisible': True, 'fit_intercept': True, 'l2_ratio': 0.5, 'learner_name': '', 'reg_type': 0, 'ridge': False, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x03\x11\x00\x00\x01\x83\x00\x00\x04W\x00\x00\x02\xda\x00\x00\x03\x11\x00\x00\x01\x83\x00\x00\x04W\x00\x00\x02\xda\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x03\x11\x00\x00\x01\x83\x00\x00\x04W\x00\x00\x02\xda', '__version__': 1}</properties>
		<properties node_id="5" format="pickle">gASVGAUAAAAAAAB9lCiMFGNvbXBhcmlzb25fY3JpdGVyaW9ulEsAjBJjb250cm9sQXJlYVZpc2li
bGWUiIwNY3Zfc3RyYXRpZmllZJSJjAduX2ZvbGRzlEsCjAluX3JlcGVhdHOUSwOMCnJlc2FtcGxp
bmeUSwCMBHJvcGWURz+5mZmZmZmajAtzYW1wbGVfc2l6ZZRLCYwTc2F2ZWRXaWRnZXRHZW9tZXRy
eZRDQgHZ0MsAAwAAAAAC7AAAAWEAAAX3AAADOQAAAuwAAAFhAAAF9wAAAzkAAAAAAAAAAAeAAAAC
7AAAAWEAAAX3AAADOZSMEnNodWZmbGVfc3RyYXRpZmllZJSIjAh1c2Vfcm9wZZSJjAtzY29yZV90
YWJsZZR9lIwMc2hvd25fc2NvcmVzlI+UKIwDTVNFlIwCQ0GUjA5UcmFpbiB0aW1lIFtzXZSMA0FV
Q5SMA01BRZSMCVByZWNpc2lvbpSMAkYxlIwEUk1TRZSMDVRlc3QgdGltZSBbc12UjAJSMpSMBlJl
Y2FsbJSQc4wLX192ZXJzaW9uX1+USwOMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRn
ZXQuc2V0dGluZ3OUjAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojA9jbGFzc19zZWxlY3Rp
b26UjBYoQXZlcmFnZSBvdmVyIGNsYXNzZXMplEr/////hpSMDGZvbGRfZmVhdHVyZZROSv7///+G
lIwVZm9sZF9mZWF0dXJlX3NlbGVjdGVklIlK/v///4aUaA19lGgcSwN1jAphdHRyaWJ1dGVzlIwD
WDFflEsChpSMA1gyX5RLAoaUhpSMBW1ldGFzlCmMCmNsYXNzX3ZhcnOUjAF5lEsChpSFlHViaCEp
gZR9lChoJH2UKGgmjBYoQXZlcmFnZSBvdmVyIGNsYXNzZXMplEr/////hpRoKU5K/v///4aUaCuJ
Sv7///+GlGgNfZRoHEsDdWguKIwCeDCUSwKGlIwCeDGUSwKGlIwEeDBeMpRLAoaUjAV4MCB4MZRL
AoaUjAR4MV4ylEsChpR0lGg0KWg1aDZLAoaUhZR1YmghKYGUfZQoaCR9lCiMD2NsYXNzX3NlbGVj
dGlvbpRoPEr/////hpSMDGZvbGRfZmVhdHVyZZROSv7///+GlIwVZm9sZF9mZWF0dXJlX3NlbGVj
dGVklIlK/v///4aUjAtzY29yZV90YWJsZZR9lGgcSwN1aC4ojAJ4MJRLAoaUjAJ4MZRLAoaUjAR4
MF4ylEsChpSMBXgwIHgxlEsChpSMBHgxXjKUSwKGlIwEeDBeM5RLAoaUjAd4MF4yIHgxlEsChpSM
B3gwIHgxXjKUSwKGlIwEeDFeM5RLAoaUjAR4MF40lEsChpSMB3gwXjMgeDGUSwKGlIwJeDBeMiB4
MV4ylEsChpSMB3gwIHgxXjOUSwKGlIwEeDFeNJRLAoaUdJRoNCloNWg2SwKGlIWUdWJoISmBlH2U
KGgkfZQojA9jbGFzc19zZWxlY3Rpb26UjBYoQXZlcmFnZSBvdmVyIGNsYXNzZXMplEr/////hpSM
DGZvbGRfZmVhdHVyZZROSv7///+GlIwVZm9sZF9mZWF0dXJlX3NlbGVjdGVklIlK/v///4aUjAtz
Y29yZV90YWJsZZR9lGgcSwN1aC6MAngxlEsChpSMAngylEsChpSGlGg0KWg1jAJEMZRLAYaUhZR1
YmV1Lg==
</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01c\x00\x00\x00u\x00\x00\x05\xd4\x00\x00\x02\x8f\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e', 'scriptLibrary': [{'name': 'Diagram_target_predictions.py', 'script': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = False             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'filename': 'C:/Users/00613/Sync-Austausch/_ML/_Orange/Orange-Python-Scripts/Diagram_target_predictions.py'}], 'scriptText': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = False             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01O\x00\x00\x00\x84\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="7" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01c\x00\x00\x00u\x00\x00\x05\xd4\x00\x00\x02\x8f\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e', 'scriptLibrary': [{'name': 'Diagram_target_predictions.py', 'script': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = False             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'filename': 'C:/Users/00613/Sync-Austausch/_ML/_Orange/Orange-Python-Scripts/Diagram_target_predictions.py'}], 'scriptText': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = True             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01O\x00\x00\x00\x84\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="8" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x01d\x00\x00\x00\x94\x00\x00\x05\xd3\x00\x00\x02\x8e', 'scriptLibrary': [{'name': 'Diagram_target_predictions.py', 'script': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = False             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'filename': 'C:/Users/00613/Sync-Austausch/_ML/_Orange/Orange-Python-Scripts/Diagram_target_predictions.py'}], 'scriptText': '# Shows 2D- or 3D-diagram of data\n#################################\n# Settings:\nmetadata = True             # False  if metadata/predictions should not be shown\n#                             True   if metadata/predictions should be shown\nenforce_2D = False          # True   if 2D-diagram should be shown, although \n#                             two dimensions (features) are available in input data\nscatter_prediction = True   # True -&gt; dots, False -&gt; lines for metadata/predictions \n#                             in 2D-diagram\nprediction_model = 1        # Standard 1 for 1 column of predictions in metadata or\n#                             first column of predictions; \n#                             otherwise number of column, whose predictions should be shown\n#####################################################\n# File: Diagram_target_predictions.py\n\n"""\nWidget input: data with one or two numerical features, numerial target and (optional) one or several predictions, stored as metadata\nWidget output: -\n\nUsage:\n* Show numerical data with target and one feature in a scatterplot together with predicted data\n* Show numerical data with target and two features in a 3D-scatterplot together with predicted data\n* Predictions can be shown as dots or as line in 2D- and as surface in 3D-plots.\n\n"""\n\n\nimport Orange\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nX = in_data.X\ny = in_data.Y\nif metadata: \n    y_hat = in_data.metas[:,prediction_model-1] \n    model_name = in_data.domain.metas[prediction_model-1].name\nelse: \n    y_hat=None\n    model_name =""\n\nif X.shape[1] ==2: display_3D = True \nelse: display_3D = False\n\nif enforce_2D: display_3D = False\n\ndef show(X, y, y_hat, name=model_name):\n    if display_3D:\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection=\'3d\')\n        ax.scatter(X[:,0], X[:,1], y, s= 10, marker="o", c="red", label = "Training data")\n        if metadata: ax.plot_trisurf(X[:,0], X[:,1], y_hat, alpha=0.5)\n        ax.set_xlabel(in_data.domain[0])\n        ax.set_ylabel(in_data.domain[1])\n        ax.set_zlabel(in_data.domain.class_var.name)\n        ax.set_xlim(0, X[:,0].max()+2)\n        ax.set_ylim(0, X[:,1].max()+2)\n        #ax.set_zlim(0, 400)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n    else:\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.scatter(X[:,0], y, marker="o", c="red", label = "Training data")\n        if metadata:\n            if scatter_prediction:\n                ax.scatter(X[:,0], y_hat, marker="+", c="blue", label = "Model predictions")\n            else:\n                ax.plot(X[:,0], y_hat,  c="blue", label = "Model predictions")\n        plt.xlabel(in_data.domain[0])\n        plt.ylabel(in_data.domain.class_var.name)\n        plt.title(name)\n        plt.legend()\n        plt.show()\n\nshow(X=X, y=y, y_hat=y_hat, name=model_name)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01O\x00\x00\x00\x84\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="9" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 0, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00w\x00\x00\x00\x0f\x00\x00\x05G\x00\x00\x022\x00\x00\x00x\x00\x00\x00.\x00\x00\x05F\x00\x00\x021\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x00x\x00\x00\x00.\x00\x00\x05F\x00\x00\x021', 'scriptLibrary': [{'name': 'Poly_Regression.py', 'script': '# Polynomial Regression\n########################################################\n# Settings:\nname="Polynomial Regression, degree = 3"         # Name of the learner/model in other widgets, e.g. Test and Score\ndegree = 2            # maximal degree of the polynomial features\nfit_intercept = True  # \ntype = "0"            # 0: ordinary Least square \n                      # 1: Lasso (L1-Regularization)\n                      # 2: Ridge (L2-Regularization)\nalpha = 0.0001        # parameter alpha for L1- and L2-Regularization only\n#################################################################\n# File: Poly_Regression.py\n\n"""\n* Widget input: \n    - (optional) data \n    - (optional) preprocessors on object-input\n\n* Widget output: \n    - learner on learner-output, if no data on input\n    - learner and trained model on classifier-output, if data on input\n\n* Creates a learner for polynomial regression, which can be used e.g. in Test and Score-Widget\n* Additionally creates a trained model, if training data is connectet to data-input, e.g. for Predictions-Widget\n\n"""\n\nimport Orange\ndata = in_data\npreprocessors=in_objects\n\nif type == "0":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.LinearRegressionLearner(fit_intercept=fit_intercept),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: ordinary Least square")\n\nelif type == "1":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.LassoRegressionLearner(alpha=alpha,  \n            fit_intercept=fit_intercept, max_iter=2000),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: Lasso (L1)")\n\nelif type == "2":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.RidgeRegressionLearner(alpha=alpha,  \n            fit_intercept=fit_intercept),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: Ridge (L2)")\nelse:\n    print("no algorism specified")\n\nlearner.name = name\n\nif data != None:\n    classifier = learner(data)  \n    classifier.name = name\n\nout_learner = learner\nif data != None:\n    out_classifier = classifier \nelse:\n    out_classifier = None\nprint("\\nPreprocessors:")\nprint(preprocessors)\n\n\n# all possible settings for underlying learners for linear regression:\n#Orange.regression.linear.LinearRegressionLearner(preprocessors=None, fit_intercept=True)\n\n#Orange.regression.linear.RidgeRegressionLearner(alpha=1.0, fit_intercept=True, normalize=False, copy_X=True, max_iter=None, tol=0.001, solver=\'auto\', preprocessors=None)\n\n#Orange.regression.linear.LassoRegressionLearner(alpha=1.0, fit_intercept=True, normalize=False, precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, preprocessors=None)\n', 'filename': 'C:/Users/00613/Sync-Austausch/_ML/_Orange/Orange-Python-Scripts/PolyFeatures.py'}], 'scriptText': '# Polynomial Regression\n########################################################\n# Settings:\nname="Polynomial Regression, degree = 3"         # Name of the learner/model in other widgets, e.g. Test and Score\ndegree = 2            # maximal degree of the polynomial features\nfit_intercept = True  # \ntype = "0"            # 0: ordinary Least square \n                      # 1: Lasso (L1-Regularization)\n                      # 2: Ridge (L2-Regularization)\nalpha = 0.0001        # parameter alpha for L1- and L2-Regularization only\n#################################################################\n# File: Poly_Regression.py\n\n"""\n* Widget input: \n    - (optional) data \n    - (optional) preprocessors on object-input\n\n* Widget output: \n    - learner on learner-output, if no data on input\n    - learner and trained model on classifier-output, if data on input\n\n* Creates a learner for polynomial regression, which can be used e.g. in Test and Score-Widget\n* Additionally creates a trained model, if training data is connectet to data-input, e.g. for Predictions-Widget\n\n"""\n\nimport Orange\ndata = in_data\npreprocessors=in_objects\n\nif type == "0":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.LinearRegressionLearner(fit_intercept=fit_intercept),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: ordinary Least square")\n\nelif type == "1":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.LassoRegressionLearner(alpha=alpha,  \n            fit_intercept=fit_intercept, max_iter=2000),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: Lasso (L1)")\n\nelif type == "2":\n    learner = Orange.regression.linear.PolynomialLearner(\n        learner=Orange.regression.linear.RidgeRegressionLearner(alpha=alpha,  \n            fit_intercept=fit_intercept),\n        degree=degree, preprocessors=preprocessors, include_bias=False)\n    print("\\nAlgorism: Ridge (L2)")\nelse:\n    print("no algorism specified")\n\nlearner.name = name\n\nif data != None:\n    classifier = learner(data)  \n    classifier.name = name\n\nout_learner = learner\nif data != None:\n    out_classifier = classifier \nelse:\n    out_classifier = None\nprint("\\nPreprocessors:")\nprint(preprocessors)\n\n\n# all possible settings for underlying learners for linear regression:\n#Orange.regression.linear.LinearRegressionLearner(preprocessors=None, fit_intercept=True)\n\n#Orange.regression.linear.RidgeRegressionLearner(alpha=1.0, fit_intercept=True, normalize=False, copy_X=True, max_iter=None, tol=0.001, solver=\'auto\', preprocessors=None)\n\n#Orange.regression.linear.LassoRegressionLearner(alpha=1.0, fit_intercept=True, normalize=False, precompute=False, copy_X=True, max_iter=1000, tol=0.0001, warm_start=False, positive=False, preprocessors=None)\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x01+\x00\x00\x00\xb1\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 2}</properties>
		<properties node_id="10" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00~\x00\x00\x00\x87\x00\x00\x03\xf0\x00\x00\x04P\x00\x00\x00\x7f\x00\x00\x00\xa6\x00\x00\x03\xef\x00\x00\x04O\x00\x00\x00\x00\x00\x00\x00\x00\x07\x80\x00\x00\x00\x7f\x00\x00\x00\xa6\x00\x00\x03\xef\x00\x00\x04O', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
